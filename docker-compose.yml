services:

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfiles/Dockerfile.dev
    container_name: backend
    volumes:
      - ./backend/src/cloud_storage_app:/app/cloud_storage_app
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    env_file:
      - backend/.env
    depends_on:
      - db
    networks:
      - app-network
    develop:
      watch:
        - action: sync+restart
          path: ./backend
          target: /app
        - action: rebuild
          path: backend/pyproject.toml
          target: /app/pyproject.toml

  db:
    image: postgres:15-alpine
    container_name: postgres_db
    env_file:
      - backend/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - app-network
  
  # frontend:
  #   build:
  #     context: .
  #     dockerfile: frontend/Dockerfiles/Dockerfile.dev
  #   container_name: frontend
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true
  #     - WATCHPACK_POLLING=true
  #     - REACT_APP_API_URL=http://localhost:8080
  #     - WDS_SOCKET_HOST=localhost
  #     - WDS_SOCKET_PORT=3000
  #     - WDS_SOCKET_PATH=/ws
  #   stdin_open: true
  #   tty: true
  #   networks:
  #     - app-network
  #   develop:
  #     watch:
  #       - action: sync
  #         path: ./frontend/src
  #         target: /app/src
  #       - action: sync
  #         path: ./frontend/public
  #         target: /app/public
  #       - action: rebuild
  #         path: ./frontend/package.json

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge